{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","Yelp","search","fetch","headers","Authorization","process","then","response","json","jsonResponse","console","log","image_url","adress","adress1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af8e49e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        const { business } = this.props;\r\n        return (\r\n            <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                <img src={business.imageSrc} alt=''/>\r\n            </div>\r\n            <h2>{business.name}</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                <p>{business.address}</p>\r\n                <p>{business.city}</p>\r\n                <p>{business.state} {business.zipCode}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                <h3>{business.category}</h3>\r\n                <h3 className=\"rating\">{business.rating}</h3>\r\n                <p>{business.reviewCount} reviews</p>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                { this.props.businesses.map((business) => {\r\n                    return <Business key={business.id} business={ business } />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n}\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n         };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (sortByOption === this.state.sortBy) {\r\n            return 'active';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption});\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({location: event.target.value});\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy)\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n            return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n                <ul>\r\n                    {this.renderSortByOptions()}\r\n                </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n                <input placeholder=\"Search Businesses\" onChange= {this.handleTermChange}/>\r\n                <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n                <a href=\"www.#.com\" onClick={this.handleSearch}>Let's Go</a>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = process.env.REACT_APP_KEY;\r\n\r\nconst Yelp = {\r\n\tsearch(term, location, sortBy) {\r\n\t\treturn fetch(\r\n\t\t\t`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${apiKey}`\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((jsonResponse) => {\r\n\t\t\t\tif (jsonResponse.businesses) {\r\n\t\t\t\t\treturn jsonResponse.businesses.map((business) => {\r\n\t\t\t\t\t\tconsole.log(business);\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: business.id,\r\n\t\t\t\t\t\t\timageSrc: business.image_url,\r\n\t\t\t\t\t\t\tname: business.name,\r\n\t\t\t\t\t\t\tadress: business.location.adress1,\r\n\t\t\t\t\t\t\tcity: business.location.city,\r\n\t\t\t\t\t\t\tstate: business.location.state,\r\n\t\t\t\t\t\t\tzipCode: business.location.zip_code,\r\n\t\t\t\t\t\t\tcategory: business.categories[0].title,\r\n\t\t\t\t\t\t\trating: business.rating,\r\n\t\t\t\t\t\t\treviewCount: business.review_count\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from './components/BusinessList/BusinessList';\r\nimport SearchBar from './components/SearchBar/SearchBar';\r\nimport Yelp from './util/Yelp';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: [],\r\n    };\r\n\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp (term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then((businesses) => {\r\n      this.setState ({ businesses: businesses });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        < SearchBar searchYelp={ this.searchYelp } />\r\n        < BusinessList businesses={ this.state.businesses } />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}